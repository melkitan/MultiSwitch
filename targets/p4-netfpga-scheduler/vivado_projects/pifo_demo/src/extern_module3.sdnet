
struct sume_metadata_t {
  pifo_info : 32,
  dma_q_size : 16,
  nf3_q_size : 16,
  nf2_q_size : 16,
  nf1_q_size : 16,
  nf0_q_size : 16,
  send_dig_to_cpu : 8,
  drop : 8,
  dst_port : 8,
  src_port : 8,
  pkt_len : 16 }
struct Ethernet_h {
  isValid : 1,
  dstAddr : 48,
  srcAddr : 48,
  etherType : 16 }
struct Calc_h {
  isValid : 1,
  class_id : 5 }
struct Parsed_packet {
  ethernet : Ethernet_h,
  calc : Calc_h }
struct user_metadata_t {
  unused : 8 }
struct digest_data_t {
  unused : 256 }
class digest_data_t_0::Tuple(out) {
  struct {
    unused : 256 } }
class sume_metadata_t_0::Tuple(inout) {
  struct {
    pifo_info : 32,
    dma_q_size : 16,
    nf3_q_size : 16,
    nf2_q_size : 16,
    nf1_q_size : 16,
    nf0_q_size : 16,
    send_dig_to_cpu : 8,
    drop : 8,
    dst_port : 8,
    src_port : 8,
    pkt_len : 16 } }
class TopParser_t::ParsingEngine(12144,2,start) {
  class p_t::Tuple(out) {
    struct {
      ethernet : Ethernet_h,
      calc : Calc_h } }
  class user_metadata_t_0::Tuple(out) {
    struct {
      unused : 8 } }
  class digest_data_t_0::Tuple(out) {
    struct {
      unused : 256 } }
  class sume_metadata_t_0::Tuple(inout) {
    struct {
      pifo_info : 32,
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class TopParser_extracts_t::Tuple(out) {
    struct {
      size : 32 } }
  p_t p;
  user_metadata_t_0 user_metadata;
  digest_data_t_0 digest_data;
  sume_metadata_t_0 sume_metadata;
  TopParser_extracts_t TopParser_extracts;
  class start::Section(1) {
    struct {
      dstAddr_0 : 48,
      srcAddr_0 : 48,
      etherType_0 : 16 }
    method update = {
      p.ethernet.isValid = 1,
      p.ethernet.dstAddr = dstAddr_0,
      p.ethernet.srcAddr = srcAddr_0,
      p.ethernet.etherType = etherType_0,
      TopParser_extracts.size = (TopParser_extracts.size + 112),
      user_metadata.unused = 0,
      digest_data.unused = 0 }
    method move_to_section = accept;
    method increment_offset = 112; }
  class accept::Section(2) {
    method move_to_section = done(0);
    method increment_offset = 0; }
  class reject::Section {
    method move_to_section = done(0);
    method increment_offset = 0; } }
struct set_calc_0_cp {
  d1 : 5,
  port : 8 }
class TopPipe_lvl_t::TupleEngine(1,setup) {
  class TopPipe_fl_t::Tuple(out) {
    struct {
      result_1 : 32 } }
  class digest_data_t_1::Tuple(inout) {
    struct {
      unused : 256 } }
  class local_state_t::Tuple(out) {
    struct {
      id : 16 } }
  class p_t_0::Tuple(inout) {
    struct {
      ethernet : Ethernet_h,
      calc : Calc_h } }
  class sume_metadata_t_1::Tuple(inout) {
    struct {
      pifo_info : 32,
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class user_metadata_t_1::Tuple(inout) {
    struct {
      unused : 8 } }
  class table_calc_req_t::Tuple(out) {
    struct {
      lookup_request_key : 48 } }
  TopPipe_fl_t TopPipe_fl;
  digest_data_t_1 digest_data;
  local_state_t local_state;
  p_t_0 p;
  sume_metadata_t_1 sume_metadata;
  user_metadata_t_1 user_metadata;
  table_calc_req_t table_calc_req;
  class setup::Section(1) {
    method update = {
      table_calc_req.lookup_request_key = p.ethernet.dstAddr }
    method move_to_section = done(0);
    method increment_offset = 0; } }
class table_calc_t::LookupEngine(EM,64,48,15,1,0) {
  class table_calc_req_t::Tuple(in) {
    struct {
      lookup_request_key : 48 } }
  class table_calc_resp_t::Tuple(out) {
    struct {
      hit : 1,
      action_run : 2,
      set_calc_0 : set_calc_0_cp } }
  table_calc_req_t request;
  table_calc_resp_t response;
  method send_request = { key = request }
  method receive_response = { response = value } }
class TopPipe_lvl_0_t::TupleEngine(4,table_calc_sec) {
  class TopPipe_fl_t::Tuple(inout) {
    struct {
      result_1 : 32 } }
  class digest_data_t_1::Tuple(inout) {
    struct {
      unused : 256 } }
  class local_state_t::Tuple(inout) {
    struct {
      id : 16 } }
  class p_t_0::Tuple(inout) {
    struct {
      ethernet : Ethernet_h,
      calc : Calc_h } }
  class sume_metadata_t_1::Tuple(inout) {
    struct {
      pifo_info : 32,
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class user_metadata_t_1::Tuple(inout) {
    struct {
      unused : 8 } }
  class my_pifo_rank_calc_input_t::Tuple(out) {
    struct {
      stateful_valid : 1,
      field1 : 8,
      field2 : 5 } }
  class table_calc_resp_t::Tuple(inout) {
    struct {
      hit : 1,
      action_run : 2,
      set_calc_0 : set_calc_0_cp } }
  TopPipe_fl_t TopPipe_fl;
  digest_data_t_1 digest_data;
  local_state_t local_state;
  p_t_0 p;
  sume_metadata_t_1 sume_metadata;
  user_metadata_t_1 user_metadata;
  my_pifo_rank_calc_input_t my_pifo_rank_calc_input;
  table_calc_resp_t table_calc_resp;
  class NoAction_0_sec::Section(2) {
    method move_to_section = act_sec;
    method increment_offset = 0; }
  class act_sec::Section(3) {
    method update = {
      my_pifo_rank_calc_input.stateful_valid = 1,
      my_pifo_rank_calc_input.field1 = sume_metadata.dst_port,
      my_pifo_rank_calc_input.field2 = p.calc.class_id,
      local_state.id = 5 }
    method move_to_section = local_end;
    method increment_offset = 0; }
  class local_end::Section(4) {
    method move_to_section = done(0);
    method increment_offset = 0; }
  class set_calc_0_sec::Section(2) {
    method update = {
      p.calc.isValid = 1,
      p.calc.class_id = table_calc_resp.set_calc_0.d1,
      sume_metadata.dst_port = table_calc_resp.set_calc_0.port }
    method move_to_section = act_sec;
    method increment_offset = 0; }
  class table_calc_sec::Section(1) {
    map action_select {
      (1, set_calc_0_sec),
      (2, NoAction_0_sec),
      NoAction_0_sec }
    method move_to_section = if ((table_calc_resp.hit == 1)) action_select(table_calc_resp.action_run) else NoAction_0_sec;
    method increment_offset = 0; } }
class my_pifo_rank_calc_0_t::UserEngine(2, 8) {
  class my_pifo_rank_calc_input_t::Tuple(in) {
    struct {
      stateful_valid : 1,
      field1 : 8,
      field2 : 5 } }
  my_pifo_rank_calc_input_t my_pifo_rank_calc_input;
  class my_pifo_rank_calc_output_t::Tuple(out) {
    struct {
      result : 32 } }
  my_pifo_rank_calc_output_t my_pifo_rank_calc_output; }
class TopPipe_lvl_1_t::TupleEngine(4,local_start) {
  class TopPipe_fl_t::Tuple(in) {
    struct {
      result_1 : 32 } }
  class digest_data_t_1::Tuple(inout) {
    struct {
      unused : 256 } }
  class local_state_t::Tuple(in) {
    struct {
      id : 16 } }
  class p_t_0::Tuple(inout) {
    struct {
      ethernet : Ethernet_h,
      calc : Calc_h } }
  class sume_metadata_t_1::Tuple(inout) {
    struct {
      pifo_info : 32,
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class table_calc_resp_t::Tuple(in) {
    struct {
      hit : 1,
      action_run : 2,
      set_calc_0 : set_calc_0_cp } }
  class user_metadata_t_1::Tuple(inout) {
    struct {
      unused : 8 } }
  class my_pifo_rank_calc_output_t::Tuple(in) {
    struct {
      result : 32 } }
  TopPipe_fl_t TopPipe_fl;
  digest_data_t_1 digest_data;
  local_state_t local_state;
  p_t_0 p;
  sume_metadata_t_1 sume_metadata;
  table_calc_resp_t table_calc_resp;
  user_metadata_t_1 user_metadata;
  my_pifo_rank_calc_output_t my_pifo_rank_calc_output;
  class local_start::Section(1) {
    map transition {
      (5, my_pifo_rank_calc_sec),
      done(0) }
    method move_to_section = transition(local_state.id);
    method increment_offset = 0; }
  class my_pifo_rank_calc_sec::Section(2) {
    method update = {
      TopPipe_fl.result_1 = my_pifo_rank_calc_output.result }
    method move_to_section = split_act_sec;
    method increment_offset = 0; }
  class sink::Section(4) {
    method move_to_section = done(0);
    method increment_offset = 0; }
  class split_act_sec::Section(3) {
    method update = {
      sume_metadata.pifo_info = TopPipe_fl.result_1 }
    method move_to_section = sink;
    method increment_offset = 0; } }
class TopDeparser_t::EditingEngine(12144,3,extract_headers_sec) {
  class p_t_1::Tuple(in) {
    struct {
      ethernet : Ethernet_h,
      calc : Calc_h } }
  class user_metadata_t_2::Tuple(in) {
    struct {
      unused : 8 } }
  class digest_data_t_2::Tuple(inout) {
    struct {
      unused : 256 } }
  class sume_metadata_t_2::Tuple(inout) {
    struct {
      pifo_info : 32,
      dma_q_size : 16,
      nf3_q_size : 16,
      nf2_q_size : 16,
      nf1_q_size : 16,
      nf0_q_size : 16,
      send_dig_to_cpu : 8,
      drop : 8,
      dst_port : 8,
      src_port : 8,
      pkt_len : 16 } }
  class TopDeparser_extracts_t::Tuple(in) {
    struct {
      size : 32 } }
  p_t_1 p;
  user_metadata_t_2 user_metadata;
  digest_data_t_2 digest_data;
  sume_metadata_t_2 sume_metadata;
  TopDeparser_extracts_t TopDeparser_extracts;
  class act_0_sec::Section(2) {
    method move_to_section = emit_0;
    method increment_offset = 0; }
  class emit_0::Section(3) {
    struct {
      dstAddr : 48,
      srcAddr : 48,
      etherType : 16 }
    method insert = if (p.ethernet.isValid) 112 else 0;
    method update = {
      dstAddr = p.ethernet.dstAddr,
      srcAddr = p.ethernet.srcAddr,
      etherType = p.ethernet.etherType }
    method move_to_section = done(0);
    method increment_offset = 0; }
  class extract_headers_sec::Section(1) {
    method remove = TopDeparser_extracts.size;
    method move_to_section = act_0_sec;
    method increment_offset = 0; } }
class Packet_input::Packet(in) {}
class Packet_output::Packet(out) {}
class SimpleSumeSwitch::System {
  digest_data_t_0 digest_data;
  sume_metadata_t_0 sume_metadata;
  TopParser_t TopParser;
  TopPipe_lvl_t TopPipe_lvl;
  table_calc_t table_calc;
  TopPipe_lvl_0_t TopPipe_lvl_0;
  my_pifo_rank_calc_0_t my_pifo_rank_calc_0;
  TopPipe_lvl_1_t TopPipe_lvl_1;
  TopDeparser_t TopDeparser;
  Packet_input packet_in;
  Packet_output packet_out;
  method connect = {
    TopPipe_lvl_0.TopPipe_fl = TopPipe_lvl.TopPipe_fl,
    TopPipe_lvl_0.digest_data = TopPipe_lvl.digest_data,
    TopPipe_lvl_0.local_state = TopPipe_lvl.local_state,
    TopPipe_lvl_0.p = TopPipe_lvl.p,
    TopPipe_lvl_0.sume_metadata = TopPipe_lvl.sume_metadata,
    TopPipe_lvl_0.user_metadata = TopPipe_lvl.user_metadata,
    table_calc.request = TopPipe_lvl.table_calc_req,
    TopPipe_lvl_0.table_calc_resp = table_calc.response,
    TopPipe_lvl_1.TopPipe_fl = TopPipe_lvl_0.TopPipe_fl,
    TopPipe_lvl_1.digest_data = TopPipe_lvl_0.digest_data,
    TopPipe_lvl_1.local_state = TopPipe_lvl_0.local_state,
    TopPipe_lvl_1.p = TopPipe_lvl_0.p,
    TopPipe_lvl_1.sume_metadata = TopPipe_lvl_0.sume_metadata,
    TopPipe_lvl_1.table_calc_resp = TopPipe_lvl_0.table_calc_resp,
    TopPipe_lvl_1.user_metadata = TopPipe_lvl_0.user_metadata,
    my_pifo_rank_calc_0.my_pifo_rank_calc_input = TopPipe_lvl_0.my_pifo_rank_calc_input,
    TopPipe_lvl_1.my_pifo_rank_calc_output = my_pifo_rank_calc_0.my_pifo_rank_calc_output,
    TopPipe_lvl.p = TopParser.p,
    TopDeparser.p = TopPipe_lvl_1.p,
    TopPipe_lvl.user_metadata = TopParser.user_metadata,
    TopDeparser.user_metadata = TopPipe_lvl_1.user_metadata,
    TopPipe_lvl.digest_data = TopParser.digest_data,
    TopDeparser.digest_data = TopPipe_lvl_1.digest_data,
    digest_data = TopDeparser.digest_data,
    TopParser.sume_metadata = sume_metadata,
    TopPipe_lvl.sume_metadata = TopParser.sume_metadata,
    TopDeparser.sume_metadata = TopPipe_lvl_1.sume_metadata,
    sume_metadata = TopDeparser.sume_metadata,
    TopParser.packet_in = packet_in,
    TopDeparser.packet_in = TopParser.packet_out,
    packet_out = TopDeparser.packet_out,
    TopDeparser.TopDeparser_extracts = TopParser.TopParser_extracts } }